library("hgu95av2.db")
library(ALL)
data(ALL)
ALLB123 <- ALL[,ALL$BT %in% c("B1","B2", "B3")]
pano <- apply(exprs(ALLB123), 1, function(x) anova(lm(x ~ ALLB123$BT))$Pr[1])
pano
names <- featureNames(ALL)[pano<0.000001]
names
symb <- mget(names,env=hgu95av2SYMBOL)
ssymb
symb
ALLBTnames <- ALLB123[names, ]
probedat <- as.matrix(exprs(ALLBTnames))
probedat
row.names(probedat)<- unlist(symb)
row.names()
row.names(probedat)
df <- data.frame(Y = factor(ALLBTnames$BT), X=t(probedat))
df
Y <- factor(ALLBTnames$BT); X <- t(probedat)
Y
svmest <- svm(X, Y, data=df, type="C-classification", kernel = "linear")
svmest
svmpred <- predict(svmest, X, probability=TRUE)
svmpred
table(svmpred, factor(ALLBTnames$BT))
data(golub, package= "multtest")
gol.fac <- factor(golub.cl, levels=0:1, labels= c("ALL", "AML"))
sigma <- 0.25; n <- 27; mu0 <-0
x <- golub[2058, gol.fac=="ALL"]
z.value <- sqrt(n) * (mean(x) - mu0)/sigma
2*pnorm(-abs(z.value), 0,1)
BiocManager::install("preprocessCore")
install.packages("gert")
install.packages("gert")
install.packages("devtools", dependencies = TRUE)
remotes::install_github("r-lib/gert")
install.packages("gert")
install.packages("git2r")
install.packages("gert")
BiocManager::install("preprocessCore")
BiocManager::install("preprocessCore")
#---read-in
library(flowCore)
library(HDCytoData)
#---visulization
library(RColorBrewer)
library(cowplot)
library(reshape2)
library(ggplot2)
library(ggridges)
#---analyznig
library(igraph)
library(flowCL)
library(Radviz)
library(dplyr)
library(MASS)
library(cytofkit)
library(edgeR)
library(uwot)
library(miscTools)
library(ncdfFlow)
library(limma)
library(MEM)
library(kohonen)
library(igraph)
library(kohonen)
library(ConsensusClusterPlus)
library(Rtsne)
library(cydar)
library(ncdfFlow)
### 0.1 Data read-in
fcs_files <- list.files(path = 'Data/', pattern = '.fcs$', full=TRUE, ignore.case = TRUE)
devtools::install_github("saeyslab/FlowSOM", build_vignettes = TRUE)
install.packages("broom.mixed")
###---Figure 2A
###---Phenograph---###
#---read-in
#library(flowCore)
#library(HDCytoData)
#---visulization
library(RColorBrewer)
library(cowplot)
library(reshape2)
library(ggplot2)
library(ggridges)
#---analyzing
library(cytofkit)
library(uwot)
###
library("devtools")
library("factoextra")
library(repr)
# 0.0 Read-in
fcs_30S_n_g_22 <- read.csv("../../Data/Bundle_input4ML/DataaS30S_norm_gated_22marker.csv")
# 0.1 Factorization
fcs_30S_n_g_22$genotype <- as.factor(fcs_30S_n_g_22$genotype)
fcs_30S_n_g_22$condition <- as.factor(fcs_30S_n_g_22$condition)
fcs_30S_n_g_22$sample <- as.factor(fcs_30S_n_g_22$sample)
#fcs_30S_n_g_22$genotype <- recode(fcs_30S_n_g_22$genotype," 1 ='WT'; 2 = 'Tet2'; 3 = 'TKO'")
#fcs_30S_n_g_22$condition <- recode(fcs_30S_n_g_22$condition," 0 ='PBS'; 1 = 'LPS';")
sample_names <- c("WT:PBS","WT:LPS", "Tet2:PBS", "Tet2:LPS", "TKO:PBS", "TKO:LPS")
#str(fcs_30S_n_g_22)
# 0.3 annotation
lineage_channels <- c("CD41", "CD48", "CD150", "cKit", "Sca1", "CD45",
"CD3c", "CD8a", "CD4", "CD25", "CD11b", "Gr1",
"CD43", "IgM", "CD45r", "Ter119")
functional_channeles <- c("TNFa","IL2", "IL6",
"Caspase3", "GranzymeB", "Ki67")
seletive_channels <- c("condition", "genotype", "sample")
sample_list <- c("20160923 Zinkel mouse pilot sample 1 v2_cells_found.fcs",
"20160923 Zinkel mouse pilot sample 2 v1_cells_found.fcs",
"20160923 Zinkel mouse pilot sample 3 v1_cells_found.fcs",
"20160923 Zinkel mouse pilot sample 4 v1_cells_found.fcs",
"20160923 Zinkel mouse pilot sample 5 v1_cells_found.fcs",
"20160923 Zinkel mouse pilot sample 6 v1_cells_found.fcs")
# 1.0 clustering
set.seed(758)
# The original parameter: #umap_mindist <- umap(Tet2.LPS, n_neighbors = 15, min_dist = 0.2, metric = 'euclidean')
umap_all <- umap(fcs_30S_n_g_22[, c(lineage_channels,functional_channeles)],
ret_model = TRUE, verbose = TRUE)$embedding
clusters_all <- cytof_cluster(xdata = fcs_30S_n_g_22[,c(lineage_channels,functional_channeles)],
method = "Rphenograph") #Rphenograph_k = 30 parameter for K
# 1.1 visualization
#umap
#ggplot(as.data.frame(umap_all), aes(x = V1, y = V2)) +
#  geom_point(color = "grey", alpha = 0.6, size = 0.5) +
#  xlab('UMAP1') + ylab('UMAP2') +
#  theme_bw()
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
cols <- getPalette(max(clusters_all))
plot_df <- cbind.data.frame(umap_all, clusters_all, fcs_30S_n_g_22$sample)
plot_df$clusters_all <- as.factor(plot_df$clusters_all)
colnames(plot_df) <- c(paste0('UMAP', 1:2), 'cluster', 'sample')
p <- list()
for (s in 1:6) {
p[[s]] <- ggplot(plot_df[plot_df$sample==unique(plot_df$sample)[s],], aes(x = UMAP1, y = UMAP2)) +
geom_point(data = plot_df, pch = 21, color = 'grey80', size = 0.5) +
geom_point(aes(color = cluster), alpha = 0.6, size = 0.5, show.legend = F) +
scale_color_manual(values = cols) +
ggtitle(paste(sample_names[s])) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
}
plot_grid(plotlist = p, ncol = 2, nrow = 3)
###---Figure 2C
###---T-REX ---###
#---read-in
library(flowCore)
library(HDCytoData)
#---visulization
library(RColorBrewer)
library(cowplot)
library(reshape2)
library(ggplot2)
library(ggridges)
#---analyzing
library(igraph)
library(flowCL)
library(Radviz)
library(dplyr)
library(MASS)
library(cytofkit)
library(edgeR)
library(uwot)
library(miscTools)
library(ncdfFlow)
library(limma)
library(MEM)
library(kohonen)
library(ConsensusClusterPlus)
library(Rtsne)
library(cydar)
library(ncdfFlow)
### Association
library(car)
library(tidyr)
library(corrplot)
library(GGally)
library(scatterplot3d)
library(sn)
library(stats)
### T-REX and Phenograph together
library(FNN)
library(dbscan)
library(tidyverse)
library(Biobase)
###
library("devtools")
library("factoextra")
library(repr)
setwd("C:/Users/wangb21/Desktop/git4public/Fcyto/Codes") #local
getwd()
### Data_Processing
#Annotating interested channels
fcs_files <- list.files(path = '../Data/Raw_and_Annotation', pattern = '.fcs$', full=TRUE, ignore.case = TRUE)
exprs_set <- data.frame()
pregating_channels <- c("Bead", "DNA1", "DNA2")
lineage_channels <- c("CD41", "CD48", "CD150", "ckit", "Ly6AE", "CD45",
"CD3c", "CD8a", "CD4", "CD25", "CD11b", "Ly6GC",
"CD43", "IgM", "CD45R", "Terr119")
functional_channeles <- c("TNFa1","TNFa2","IL2", "IL6",
"caspase3", "GranzymeB", "ki67")
instrument_channels <- c("Cell_length", "Time")
genotype_list <- c("genotype_1", "genotype_1", "genotype_2",
"genotype_2", "genotype_3", "genotype_3")
condition_list <- c("PBS", "LPS", "PBS", "LPS", "PBS", "LPS")
sample <- c()
genotype <- c()
treatment <- c()
#balanced sampling #T-REX maximum the sampling
#file 1 293778, file 2 291870, file 3 142951,
#file 4 138453, file 5 121124, file 6 166690 so the least is 121124
for (i in 1:6){
fcs <- read.FCS(filename = fcs_files[i], transformation = FALSE)
exprs <- fcs@exprs
markers <- gsub(pattern = ".*_", replacement = "", x = as.vector(fcs@parameters@data$desc))
colnames(exprs)[which(!is.na(markers))] <- markers[which(!is.na(markers))]
set.seed(134) ### equally sampled
exprs_set <- rbind(exprs_set, exprs[sample(nrow(exprs), 1200),])
sample    <- append(sample,    rep(basename(fcs_files[i]), 1200))
genotype  <- append(genotype,  rep(genotype_list[i], 1200))
treatment <- append(treatment, rep(condition_list[i], 1200))
}
#
exprs_set$sample <- sample
exprs_set$genotype <- genotype
exprs_set$treatment <- treatment
instrument_channels <- append(instrument_channels, "sample")
instrument_channels <- append(instrument_channels, "genotype")
instrument_channels <- append(instrument_channels, "treatment")
###Transformation, Gating, and Normalization
exprs_set <- as.data.frame(exprs_set)
names(exprs_set)[names(exprs_set) == "140"] <- "Bead"
names(exprs_set)[names(exprs_set) == "NA-191"] <- "DNA1"
names(exprs_set)[names(exprs_set) == "NA-193"] <- "DNA2"
names(exprs_set)[names(exprs_set)=="TNFalpha"] <- c("TNFa1","TNFa2")
cofac <- 5
exprs_set_trans <- cbind(asinh(exprs_set[,c(pregating_channels, lineage_channels, functional_channeles)]/cofac),
exprs_set[,instrument_channels])
### T-REX argo
output_filename = "_T-REX"
sample_type = "COV"
sample_id = "35"
time_comparison = "0vs4"
kvalue = 60 ## testing range 30 - 80
WT.PBSLPS.pair = exprs_set[which(exprs_set$genotype=='genotype_1'),c(pregating_channels, lineage_channels, functional_channeles)]
Tet2.PBSLPS.pair = exprs_set[which(exprs_set$genotype=='genotype_2'),c(pregating_channels, lineage_channels, functional_channeles)]
TKO.PBSLPS.pair = exprs_set[which(exprs_set$genotype=='genotype_3'),c(pregating_channels, lineage_channels, functional_channeles)]
umap.input1 = WT.PBSLPS.pair
umap.input2 = Tet2.PBSLPS.pair
umap.input3 = TKO.PBSLPS.pair
umap_WT <- umap(umap.input1, ret_model = TRUE, verbose = TRUE)
umap_Tet2 <- umap(umap.input2, ret_model = TRUE, verbose = TRUE)
umap_TKO <- umap(umap.input3, ret_model = TRUE, verbose = TRUE)
umap_WT.data = as.data.frame(umap_WT$embedding)
colnames(umap_WT.data) <- c("UMAP1", "UMAP2")
umap_Tet2.data = as.data.frame(umap_Tet2$embedding)
colnames(umap_Tet2.data) <- c("UMAP1", "UMAP2")
umap_TKO.data = as.data.frame(umap_TKO$embedding)
colnames(umap_TKO.data) <- c("UMAP1", "UMAP2")
## WT block
# KNN search per cell
neighbor_index = knnx.index(umap_WT.data,umap_WT.data,k=kvalue)
neighbor_index[neighbor_index <= nrow(umap_WT.data)/2] <- 0 #PBS
neighbor_index[neighbor_index > nrow(umap_WT.data)/2] <- 1 #LPS
# calculate percent change in each KNN region
percent_change = (rowSums(neighbor_index) / kvalue * 100)
# binning and plot info
all_WT.data = cbind(WT.PBSLPS.pair, umap_WT.data, percent_change)
range <- apply(apply(umap_WT.data, 2, range), 2, diff)
graphical.ratio <- (range[1] / range[2])
test.round = round(percent_change)
trex.plot <-
data.frame(x = umap_WT.data[, 1], y = umap_WT.data[, 2], col = test.round)
trex.plot$cuts = cut(trex.plot$col, c(0, 5, 15, 85, 95, 100), include.lowest = TRUE, right = FALSE)
trex.plot$cuts = factor(trex.plot$cuts,
levels = c("[15,85)", "[5,15)", "[0,5)", "[85,95)", "[95,100]"))
ordered_plot = trex.plot[order(trex.plot$cuts), ]
range <- apply(apply(umap_WT.data, 2, range), 2, diff)
graphical.ratio <- (range[1] / range[2])
# create T-REX plot
png(
paste(
"./output_files/",
strftime(Sys.time(), "%Y-%m-%d_%H%M%S"),
" TREX WT PBS_LPS plot.png",
sep = ""
),
res = 200,
width = 1500,
height = 1500
)
final_trex_plot <-
ggplot(ordered_plot) + geom_point(aes(x = x, y = y, colour = cuts), cex = 1) +
scale_color_manual(
name = "col",
values = c(
"[15,85)" = "lightgray",
"[5,15)" = "lightskyblue",
"[0,5)" = "navyblue",
"[85,95)" = "lightcoral",
"[95,100]" = "darkred"
)
) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs (x = "UMAP1", y = "UMAP2", title = paste(sample_type,"_",sample_id,"_",time_comparison," - Percent Change",sep = "")) + coord_fixed(ratio = graphical.ratio) + theme(legend.title = element_blank()) +
labs(caption = "Zinkel Data")
print(final_trex_plot)
dev.off()
final_trex_plot
plot.to.output<-list()
for (i in 1:ncol(umap.input1)){
color.plot <- data.frame(x = umap_WT.data[,1], y = umap_WT.data[,2], col = umap.input1[,c(i)])
order.plot <- color.plot[order(color.plot$col),]
print(ggplot(order.plot)+ geom_point(aes(x= x, y= y, col = col),cex = 0.1,shape = 1) + coord_fixed(ratio=graphical.ratio) +
theme_bw()+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs (x = "UMAP1", y = "UMAP2", col = colnames(umap.input1)[i])+
scale_color_gradientn(
colours = colorRampPalette(rev(brewer.pal(n = 11, name = "Spectral")))(50)))}
# Tet2 block
# KNN search per cell
neighbor_index = knnx.index(umap_Tet2.data,umap_Tet2.data,k=kvalue)
neighbor_index[neighbor_index <= nrow(umap_Tet2.data)/2] <- 0 #PBS
neighbor_index[neighbor_index > nrow(umap_Tet2.data)/2] <- 1 #LPS
# calculate percent change in each KNN region
percent_change = (rowSums(neighbor_index) / kvalue * 100)
# binning and plot info
all_Tet2.data = cbind(Tet2.PBSLPS.pair, umap_Tet2.data, percent_change)
range <- apply(apply(umap_Tet2.data, 2, range), 2, diff)
graphical.ratio <- (range[1] / range[2])
test.round = round(percent_change)
trex.plot <-
data.frame(x = umap_Tet2.data[, 1], y = umap_Tet2.data[, 2], col = test.round)
trex.plot$cuts = cut(trex.plot$col, c(0, 5, 15, 85, 95, 100), include.lowest = TRUE, right = FALSE)
trex.plot$cuts = factor(trex.plot$cuts,
levels = c("[15,85)", "[5,15)", "[0,5)", "[85,95)", "[95,100]"))
ordered_plot = trex.plot[order(trex.plot$cuts), ]
range <- apply(apply(umap_Tet2.data, 2, range), 2, diff)
graphical.ratio <- (range[1] / range[2])
# create T-REX plot
png(
paste(
"./output_files/",
strftime(Sys.time(), "%Y-%m-%d_%H%M%S"),
" TREX Tet2 PBS_LPS plot.png",
sep = ""
),
res = 200,
width = 1500,
height = 1500
)
final_trex_plot <-
ggplot(ordered_plot) + geom_point(aes(x = x, y = y, colour = cuts), cex = 1) +
scale_color_manual(
name = "col",
values = c(
"[15,85)" = "lightgray",
"[5,15)" = "lightskyblue",
"[0,5)" = "navyblue",
"[85,95)" = "lightcoral",
"[95,100]" = "darkred"
)
) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs (x = "UMAP1", y = "UMAP2", title = paste(sample_type,"_",sample_id,"_",time_comparison," - Percent Change",sep = "")) + coord_fixed(ratio = graphical.ratio) + theme(legend.title = element_blank()) +
labs(caption = "Zinkel Data")
print(final_trex_plot)
dev.off()
final_trex_plot
plot.to.output<-list()
for (i in 1:ncol(umap.input2)){
color.plot <- data.frame(x = umap_Tet2.data[,1], y = umap_Tet2.data[,2], col = umap.input2[,c(i)])
order.plot <- color.plot[order(color.plot$col),]
print(ggplot(order.plot)+ geom_point(aes(x= x, y= y, col = col),cex = 0.1,shape = 1) + coord_fixed(ratio=graphical.ratio) +
theme_bw()+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs (x = "UMAP1", y = "UMAP2", col = colnames(umap.input2)[i])+
scale_color_gradientn(
colours = colorRampPalette(rev(brewer.pal(n = 11, name = "Spectral")))(50)))}
# TKO block
# KNN search per cell
neighbor_index = knnx.index(umap_TKO.data,umap_TKO.data,k=kvalue)
neighbor_index[neighbor_index <= nrow(umap_TKO.data)/2] <- 0 #PBS
neighbor_index[neighbor_index > nrow(umap_TKO.data)/2] <- 1 #LPS
# calculate percent change in each KNN region
percent_change = (rowSums(neighbor_index) / kvalue * 100)
# binning and plot info
all_TKO.data = cbind(TKO.PBSLPS.pair, umap_TKO.data, percent_change)
range <- apply(apply(umap_TKO.data, 2, range), 2, diff)
graphical.ratio <- (range[1] / range[2])
test.round = round(percent_change)
trex.plot <-
data.frame(x = umap_TKO.data[, 1], y = umap_TKO.data[, 2], col = test.round)
trex.plot$cuts = cut(trex.plot$col, c(0, 5, 15, 85, 95, 100), include.lowest = TRUE, right = FALSE)
trex.plot$cuts = factor(trex.plot$cuts,
levels = c("[15,85)", "[5,15)", "[0,5)", "[85,95)", "[95,100]"))
ordered_plot = trex.plot[order(trex.plot$cuts), ]
range <- apply(apply(umap_TKO.data, 2, range), 2, diff)
graphical.ratio <- (range[1] / range[2])
# create T-REX plot
png(
paste(
"./output_files/",
strftime(Sys.time(), "%Y-%m-%d_%H%M%S"),
" TREX TKO PBS_LPS plot.png",
sep = ""
),
res = 200,
width = 1500,
height = 1500
)
final_trex_plot <-
ggplot(ordered_plot) + geom_point(aes(x = x, y = y, colour = cuts), cex = 1) +
scale_color_manual(
name = "col",
values = c(
"[15,85)" = "lightgray",
"[5,15)" = "lightskyblue",
"[0,5)" = "navyblue",
"[85,95)" = "lightcoral",
"[95,100]" = "darkred"
)
) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs (x = "UMAP1", y = "UMAP2", title = paste(sample_type,"_",sample_id,"_",time_comparison," - Percent Change",sep = "")) + coord_fixed(ratio = graphical.ratio) + theme(legend.title = element_blank()) +
labs(caption = "Zinkel Data")
print(final_trex_plot)
dev.off()
final_trex_plot
# uncomment lines below to plot heat on markers on umap axes
plot.to.output<-list()
for (i in 1:ncol(umap.input3)){
color.plot <- data.frame(x = umap_TKO.data[,1], y = umap_TKO.data[,2], col = umap.input3[,c(i)])
order.plot <- color.plot[order(color.plot$col),]
print(ggplot(order.plot)+ geom_point(aes(x= x, y= y, col = col),cex = 0.1,shape = 1) + coord_fixed(ratio=graphical.ratio) +
theme_bw()+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs (x = "UMAP1", y = "UMAP2", col = colnames(umap.input3)[i])+
scale_color_gradientn(
colours = colorRampPalette(rev(brewer.pal(n = 11, name = "Spectral")))(50)))}
### --    degree and direction of changes   -- ###
##################################################
all_WT.data$status <- trex.plot$cuts
sample.table <- data.frame(sample_type,sample_id,time_comparison,total_cells = nrow(umap.data))
sample.table[,c(5:9)]<-summary(trex.plot$cuts)
colnames(sample.table)[5:9]<-c( "[15,85)", "[5,15)", "[0,5)", "[85,95)", "[95,100]")
percent = 100*(summary(trex.plot$cuts)/nrow(umap.data))
sample.table$degree_of_change = (sum(percent[3]+percent[5]))
sample.table$direction_of_change = (summary(trex.plot$cuts)[5]-summary(trex.plot$cuts)[3]) / (summary(trex.plot$cuts)[5]+summary(trex.plot$cuts)[3])
write.csv(sample.table, paste("./output files/",strftime(Sys.time(),"%Y-%m-%d_%H%M%S"),"_trex_results.csv"))
print(sample.table)
### --  DBSCAN for 5th & 95th percentiles   -- ###
##################################################
regions.of.interest <- all.data %>%
dplyr::filter(status == "[0,5)" | status == "[95,100]")
regions.of.interest.umap = cbind(regions.of.interest$UMAP1,regions.of.interest$UMAP2)
a = dbscan::dbscan(regions.of.interest.umap, eps = 0.3,minPts = 50)
cluster = a$cluster
track.data = cbind(regions.of.interest,cluster)
track.data <- track.data %>%
filter(cluster!=0)
track.data$cluster[which(track.data$status=="[0,5)")]<-paste0(track.data$cluster[which(track.data$status=="[0,5)")],"05")
track.data$cluster[which(track.data$status=="[95,100]")]<-paste0(track.data$cluster[which(track.data$status=="[95,100]")],"95")
track.data$cluster<-as.numeric(track.data$cluster)
cluster.data = split(track.data,track.data$cluster)
median.percent.change = lapply(cluster.data, function(x) median(x[,which(colnames(track.data)=="percent_change")]))
mean.percent.change = lapply(cluster.data, function(x) mean(x[,which(colnames(track.data)=="percent_change")]))
write.csv(mean.percent.change,paste("./output files/",strftime(Sys.time(),"%Y-%m-%d_%H%M%S")," DBSCAN_cluster_average_percent_change.csv",sep =""))
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors,
rownames(qual_col_pals)))
values = sample(col_vector)
png(paste("./output files/",strftime(Sys.time(),"%Y-%m-%d_%H%M%S")," DBSCAN_plot.png",sep =""),res = 200, width = 1500, height = 1500)
dbscan_plot <- ggplot(data.frame(x = track.data$tSNE1,
y = track.data$tSNE2,
col = as.factor(track.data$cluster))) + coord_fixed(ratio = graphical.ratio) +
geom_point(aes(x=x, y=y, color=col),cex = 1.5) +
guides(colour = guide_legend(override.aes = list(size=5), nrow = 13)) +
labs(x = "t-SNE 1", y = "t-SNE 2",title = "DBSCAN Clusters (5th & 95th percentiles)",
color = "DBSCAN Cluster") + theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + theme(legend.title = element_blank()) + scale_color_manual(values = values)
print(dbscan_plot)
dev.off()
dbscan_plot
###---Figure 2B
###---T-REX---###
### T-REX and Phenograph together
library(flowCore)
library(uwot)
library(FNN)
library(ggplot2)
library(dbscan)
library(MEM)
library(tidyverse)
library(Biobase)
#---extended packages
#library("devtools")
#library("factoextra")
library(dplyr)
library(repr)
# 0.0 Read-in
fcs_30S_n_g_22 <- read.csv("../../Data/Bundle_input4ML/DataaS30S_norm_gated_22marker.csv")
setwd("~/Desktop/projects/git4public/DeepMutScan")
print(version)
## Figure_2&3
library(tidyr)
library(ggplot2)
library(cowplot)
library(ggcorrplot)
sessionInfo()
